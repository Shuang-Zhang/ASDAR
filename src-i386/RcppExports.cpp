// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_data
Eigen::MatrixXd get_data(const int& n, const int& p, Eigen::VectorXd& beta, const double& varr1, const double& alpha, const double& mu2, const double& varr2, const double& c_r, const int& seed);
RcppExport SEXP _ASDAR_get_data(SEXP nSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP varr1SEXP, SEXP alphaSEXP, SEXP mu2SEXP, SEXP varr2SEXP, SEXP c_rSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type varr1(varr1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const double& >::type varr2(varr2SEXP);
    Rcpp::traits::input_parameter< const double& >::type c_r(c_rSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(get_data(n, p, beta, varr1, alpha, mu2, varr2, c_r, seed));
    return rcpp_result_gen;
END_RCPP
}

// get_weight
Eigen::VectorXd get_weight(Eigen::MatrixXd& x, Eigen::VectorXd& y, Eigen::VectorXd& status);
RcppExport SEXP _ASDAR_get_weight(SEXP xSEXP, SEXP ySEXP, SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type status(statusSEXP);
    rcpp_result_gen = Rcpp::wrap(get_weight(x, y, status));
    return rcpp_result_gen;
END_RCPP
}
// get_weighted_data
std::vector<Eigen::MatrixXd> get_weighted_data(const int& n, const int& p, Eigen::VectorXd& beta, const double& varr1, const double& alpha, const double& mu2, const double& varr2, const double& c_r, const int& seed);
RcppExport SEXP _ASDAR_get_weighted_data(SEXP nSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP varr1SEXP, SEXP alphaSEXP, SEXP mu2SEXP, SEXP varr2SEXP, SEXP c_rSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type varr1(varr1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const double& >::type varr2(varr2SEXP);
    Rcpp::traits::input_parameter< const double& >::type c_r(c_rSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(get_weighted_data(n, p, beta, varr1, alpha, mu2, varr2, c_r, seed));
    return rcpp_result_gen;
END_RCPP
}
// F_function
double F_function(const Eigen::VectorXd& ita, const Eigen::MatrixXd& x_ita, const Eigen::VectorXd& y_ita);
RcppExport SEXP _ASDAR_F_function(SEXP itaSEXP, SEXP x_itaSEXP, SEXP y_itaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ita(itaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x_ita(x_itaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y_ita(y_itaSEXP);
    rcpp_result_gen = Rcpp::wrap(F_function(ita, x_ita, y_ita));
    return rcpp_result_gen;
END_RCPP
}
// DF_function
Eigen::VectorXd DF_function(const Eigen::VectorXd& ita, const Eigen::MatrixXd& x_ita, const Eigen::VectorXd& y_ita);
RcppExport SEXP _ASDAR_DF_function(SEXP itaSEXP, SEXP x_itaSEXP, SEXP y_itaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ita(itaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x_ita(x_itaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y_ita(y_itaSEXP);
    rcpp_result_gen = Rcpp::wrap(DF_function(ita, x_ita, y_ita));
    return rcpp_result_gen;
END_RCPP
}


// Sdar
std::vector<Eigen::VectorXd> Sdar(Eigen::VectorXd& ita0, int& T1, Eigen::MatrixXd x, Eigen::VectorXd y, const double tau1, Eigen::VectorXd dd, int iter_max);
RcppExport SEXP _ASDAR_Sdar(SEXP ita0SEXP, SEXP T1SEXP, SEXP xSEXP, SEXP ySEXP, SEXP tau1SEXP, SEXP ddSEXP, SEXP iter_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type ita0(ita0SEXP);
    Rcpp::traits::input_parameter< int& >::type T1(T1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dd(ddSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(Sdar(ita0, T1, x, y, tau1, dd, iter_max));
    return rcpp_result_gen;
END_RCPP
}
// Asdar
std::vector<Eigen::VectorXd> Asdar(Eigen::MatrixXd x, Eigen::VectorXd y, const double varr2, Eigen::VectorXd ita0, const int tau, const double tau1, Eigen::VectorXd dd, int iter_max);
RcppExport SEXP _ASDAR_Asdar(SEXP xSEXP, SEXP ySEXP, SEXP varr2SEXP, SEXP ita0SEXP, SEXP tauSEXP, SEXP tau1SEXP, SEXP ddSEXP, SEXP iter_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type varr2(varr2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type ita0(ita0SEXP);
    Rcpp::traits::input_parameter< const int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dd(ddSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(Asdar(x, y, varr2, ita0, tau, tau1, dd, iter_max));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ASDAR_get_data", (DL_FUNC) &_ASDAR_get_data, 9},
    {"_ASDAR_get_weight", (DL_FUNC) &_ASDAR_get_weight, 3},
    {"_ASDAR_get_weighted_data", (DL_FUNC) &_ASDAR_get_weighted_data, 9},
    {"_ASDAR_F_function", (DL_FUNC) &_ASDAR_F_function, 3},
    {"_ASDAR_DF_function", (DL_FUNC) &_ASDAR_DF_function, 3},
    {"_ASDAR_Sdar", (DL_FUNC) &_ASDAR_Sdar, 7},
    {"_ASDAR_Asdar", (DL_FUNC) &_ASDAR_Asdar, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_ASDAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
